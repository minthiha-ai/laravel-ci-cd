name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: user-service
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  test:
    name: Run Laravel Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: user_service_db
          MYSQL_USER: user_service
          MYSQL_PASSWORD: root@admin123
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, pdo, pdo_mysql, bcmath
          tools: composer:v2

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-progress

      - name: Install Parallel Test Dependencies
        run: composer require --dev brianium/paratest --with-all-dependencies

      - name: Copy Environment File
        run: cp .env.ci .env

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            nc -z 127.0.0.1 3306 && echo "MySQL is up!" && exit 0
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL did not start in time." && exit 1

      - name: Run Migrations
        run: php artisan migrate --force

      - name: Run Tests
        run: php artisan test --parallel

  package:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/user-service:latest"
          echo "Building Image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .

      - name: Push Docker Image to Docker Hub
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/user-service:latest"
          docker push $IMAGE_TAG

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: package

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

      - name: Ensure Docker & Docker Compose Installed
        run: |
          ssh root@$SERVER_IP << 'EOF'
            set -e
            if ! command -v docker &> /dev/null; then
              echo "⚠️ Docker not found! Installing..."
              apt update && apt install -y docker.io
            fi

            if ! command -v docker-compose &> /dev/null; then
              echo "⚠️ Docker Compose not found! Installing..."
              curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
            fi
          EOF

      - name: Copy `.env` to Server
        run: scp .env.docker root@$SERVER_IP:/root/user-service/.env

      - name: Copy Deploy Script to Server
        run: scp server-deploy.sh root@$SERVER_IP:/root/user-service/server-deploy.sh

      - name: Run Deployment Script
        run: |
          ssh root@$SERVER_IP << 'EOF'
            cd /root/user-service
            chmod +x server-deploy.sh
            ./server-deploy.sh
          EOF
