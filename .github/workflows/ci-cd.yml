name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: user-service
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

  build:
    name: Build Laravel Project
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, pdo, pdo_mysql, gd, intl
          tools: composer:v2

      - name: Install Dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Set Permissions
        run: chmod -R 777 storage bootstrap/cache

  security:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Security Audit
        run: composer audit || true

      - name: Run PHPStan (Static Analysis)
        run: vendor/bin/phpstan analyse --memory-limit=512M || true

      - name: Run Laravel Pint (Code Formatting)
        run: vendor/bin/pint --test || true

    test:
      name: Run Laravel Tests
      runs-on: ubuntu-latest
      needs: security

      services:
        mysql:
          image: mysql:8
          env:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: test_db
            MYSQL_USER: user
            MYSQL_PASSWORD: secret
          ports:
            - 3306:3306
          options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      steps:
        - name: Checkout Repository
        uses: actions/checkout@v4

        - name: Set up PHP
          uses: shivammathur/setup-php@v2
          with:
            php-version: 8.2
            extensions: mbstring, pdo, pdo_mysql, gd, intl
            tools: composer:v2

        - name: Install Dependencies
          run: composer install --no-dev --optimize-autoloader

        - name: Copy .env
          run: cp .env.example .env

        - name: Generate Application Key
          run: php artisan key:generate

        - name: Run Migrations
          run: php artisan migrate --force --database=mysql

        - name: Run Tests
        run: php artisan test

  package:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t $DOCKER_USERNAME/$IMAGE_NAME:latest .

      - name: Push Docker Image to Docker Hub
        run: docker push $DOCKER_USERNAME/$IMAGE_NAME:latest

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: package

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

      - name: Deploy to Server
        run: |
          ssh root@$SERVER_IP << 'EOF'
            docker pull $DOCKER_USERNAME/$IMAGE_NAME:latest
            docker stop user-service-app || true
            docker rm user-service-app || true
            docker run -d --name user-service-app -p 8080:80 $DOCKER_USERNAME/$IMAGE_NAME:latest
            docker exec user-service-app php artisan migrate --force
            docker exec user-service-app php artisan config:clear
            docker exec user-service-app php artisan cache:clear
          EOF
