name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

  build:
    name: Build Laravel Project
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, pdo, pdo_mysql, gd, intl
          tools: composer:v2

      - name: Install Dependencies
        run: composer install --no-dev --prefer-dist --optimize-autoloader

      - name: Set Permissions
        run: chmod -R 777 storage bootstrap/cache

  security:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Security Audit
        run: composer audit || true

      - name: Run PHPStan (Static Analysis)
        run: vendor/bin/phpstan analyse --memory-limit=512M || true

      - name: Run Laravel Pint (Code Formatting)
        run: vendor/bin/pint --test || true

  test:
    name: Run Laravel Tests
    runs-on: ubuntu-latest
    needs: security

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: db_user_service
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, pdo, pdo_mysql, gd, intl
          tools: composer:v2

      - name: Install Dependencies
        run: composer install --no-dev --prefer-dist --optimize-autoloader

      - name: Copy .env
        run: cp .env.example .env

      - name: Set Database Credentials
        run: |
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=db_user_service" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=root" >> .env

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            nc -z 127.0.0.1 3306 && echo "MySQL is up!" && exit 0
            echo "Waiting for MySQL..."
            sleep 2
          done
          exit 1

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Run Migrations
        run: php artisan migrate --force --database=mysql

      - name: Run Tests
        run: vendor/bin/phpunit

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Set Environment Variables for Vercel
        run: |
          vercel env add APP_KEY $(php artisan key:generate --show) --token ${{ secrets.VERCEL_TOKEN }}
          vercel env add APP_ENV production --token ${{ secrets.VERCEL_TOKEN }}
          vercel env add APP_DEBUG false --token ${{ secrets.VERCEL_TOKEN }}
          vercel env add DB_CONNECTION mysql --token ${{ secrets.VERCEL_TOKEN }}
          vercel env add DB_HOST your-db-host --token ${{ secrets.VERCEL_TOKEN }}
          vercel env add DB_PORT 3306 --token ${{ secrets.VERCEL_TOKEN }}
          vercel env add DB_DATABASE your-db-name --token ${{ secrets.VERCEL_TOKEN }}
          vercel env add DB_USERNAME your-db-user --token ${{ secrets.VERCEL_TOKEN }}
          vercel env add DB_PASSWORD your-db-password --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes

      - name: Clear Laravel Cache
        run: |
          vercel exec php artisan config:clear --token ${{ secrets.VERCEL_TOKEN }}
          vercel exec php artisan cache:clear --token ${{ secrets.VERCEL_TOKEN }}
